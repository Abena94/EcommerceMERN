{"ast":null,"code":"/*import React, { createContext, useState, useContext } from \"react\";\n\nconst CartContext = createContext()\n\nexport const useCartContext = () => useContext(CartContext)\n\nexport const CartContextProvider = ({children}) => {\n\n    const [cartList, setCartList] = useState([{}])\n    \n    \n\n    function addToCart(items) {\n        //[...cartList] (todo lo que tiene adentro lo pega dentro del nuevo array)\n\n        const cartListX = [...cartList];\n\n\t\tif (cartListX.find(prod => prod.id === items.id)) {\n\n            // sumo el subtotal nuevo al valor anterior\n            cartListX.find(prod => prod.id=== items.id).subTotal += items.quantity*items.price\n\n            // sumo la cantidad nueva al valor anterior\n            cartListX.find(prod => prod.id === items.id).quantity += items.quantity;\n\n\t\t\tsetCartList(cartListX);\n\n            \n        } else {\n            setCartList([\n                ...cartList,\n                items\n            ])\n        }\n    }\n\n    //precio total\n    const totalCart = () => {\n\t\treturn cartList.reduce((total, items) => total + (items.quantity * items.price) ,0)\n\t}\n\n    //items totales en carrito\n    const CartItems = () => {\n\t\treturn cartList.reduce((prev, next) => prev + next.quantity, 0)\n\t}\n\n    //vaciar carrito\n    const clear = () => {\n\t\tsetCartList([]);\n\t};\n\n    // eliminar item\n    const clearItem = (id) => {\n\t\tsetCartList( cartList.filter(item => item.id !== id ));\n\t};\n\n    return (\n        <CartContext.Provider value={{\n            cartList,\n            addToCart,\n            totalCart,\n            CartItems,\n            clear,\n            clearItem\n        }}>\n            {children}\n        </CartContext.Provider>\n    )\n}*/","map":{"version":3,"names":[],"sources":["C:/Users/Owner/Dropbox/My PC (LAPTOP-M9TB4ITQ)/Desktop/restaurentmern/frontend/src/context/CartContext.jsx"],"sourcesContent":["/*import React, { createContext, useState, useContext } from \"react\";\n\nconst CartContext = createContext()\n\nexport const useCartContext = () => useContext(CartContext)\n\nexport const CartContextProvider = ({children}) => {\n\n    const [cartList, setCartList] = useState([{}])\n    \n    \n\n    function addToCart(items) {\n        //[...cartList] (todo lo que tiene adentro lo pega dentro del nuevo array)\n\n        const cartListX = [...cartList];\n\n\t\tif (cartListX.find(prod => prod.id === items.id)) {\n\n            // sumo el subtotal nuevo al valor anterior\n            cartListX.find(prod => prod.id=== items.id).subTotal += items.quantity*items.price\n\n            // sumo la cantidad nueva al valor anterior\n            cartListX.find(prod => prod.id === items.id).quantity += items.quantity;\n\n\t\t\tsetCartList(cartListX);\n\n            \n        } else {\n            setCartList([\n                ...cartList,\n                items\n            ])\n        }\n    }\n\n    //precio total\n    const totalCart = () => {\n\t\treturn cartList.reduce((total, items) => total + (items.quantity * items.price) ,0)\n\t}\n\n    //items totales en carrito\n    const CartItems = () => {\n\t\treturn cartList.reduce((prev, next) => prev + next.quantity, 0)\n\t}\n\n    //vaciar carrito\n    const clear = () => {\n\t\tsetCartList([]);\n\t};\n\n    // eliminar item\n    const clearItem = (id) => {\n\t\tsetCartList( cartList.filter(item => item.id !== id ));\n\t};\n\n    return (\n        <CartContext.Provider value={{\n            cartList,\n            addToCart,\n            totalCart,\n            CartItems,\n            clear,\n            clearItem\n        }}>\n            {children}\n        </CartContext.Provider>\n    )\n}*/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}